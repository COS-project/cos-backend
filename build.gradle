plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.7'
    id 'io.spring.dependency-management' version '1.1.5'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {

    group = 'com.cos.cercat'
    version = '0.0.1'

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'java-test-fixtures'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    dependencies {

        //lombok
        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'

        //logging
        implementation 'org.slf4j:slf4j-api:2.0.16'

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
    }

    test {
        useJUnitPlatform()
        jvmArgs '-Xshare:off'
    }

    tasks.register('copySecret', Copy) {
        from("${rootProject.projectDir}/cercat-secrets")
        include('secret-env.yml')
        into('src/main/resources')
    }
}

def wrappingModules = [':infrastructure', ':applications', ':supports']

wrappingModules.each { moduleName ->
    project(moduleName) {
        bootJar {
            enabled = false
        }

        jar {
            enabled = false
        }
    }
}

bootJar {
    enabled = false
}

tasks.register("initSetting") {
    group = "custom tasks"
    description = "Execute both copyHooks and copySecret tasks."

    dependsOn("copyHooks")
}

tasks.register("copyHooks") {
    group = "git hooks"
    description = "Copy pre-commit and pre-push git hooks from .githooks to .git/hooks folder."

    doLast {
        // pre-push hook 복사
        copy {
            from("$rootDir/.githooks/pre-push")
            into("$rootDir/.git/hooks")
        }
        // pre-push hook에 실행 권한 부여
        file("$rootDir/.git/hooks/pre-push").setExecutable(true)
        println("Git pre-push hook이 성공적으로 등록되었습니다.")
    }
}

subprojects { subproject ->
    if (!wrappingModules.contains(subproject.path)) {
        subproject.processResources.dependsOn subproject.tasks.named('copySecret')
    }
}

