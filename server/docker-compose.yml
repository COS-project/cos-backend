networks:
  app-tier:
    driver: bridge
services:
  cercat-blue:
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-tier
    image: ghcr.io/jiwonkkang/cercat:latest
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: "curl -f http://localhost:8080/health || exit 1"
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      - SPRING_PROFILES_ACTIVE=prod,api
  cercat-green:
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-tier
    image: ghcr.io/jiwonkkang/cercat:latest
    depends_on:
      - redis
    restart: always
    healthcheck:
      test: "curl -f http://localhost:8080/health || exit 1"
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      - SPRING_PROFILES_ACTIVE=prod,api
  cercat-alarm:
    container_name: cercat-alarm
    environment:
      - SPRING_PROFILES_ACTIVE=prod,alarm
    extra_hosts:
      - "host.docker.internal:host-gateway"
    image: ghcr.io/jiwonkkang/cercat-alarm:latest
    networks:
      - app-tier
    ports:
      - "8081:8081"
  redis:
    container_name: cercat-redis
    networks:
      - app-tier
    image: redis:latest
    ports:
      - "6379:6379"
  nginx:
    image: nginx:1.15-alpine
    container_name: nginx
    networks:
      - app-tier
    restart: unless-stopped
    volumes:
      - ./data/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./nginx/log:/var/log/nginx
      - /etc/localtime:/etc/localtime
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    image: certbot/certbot
    networks:
      - app-tier
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - ./data/promtail/config/promtail-config.yaml:/etc/promtail/config.yaml
      - ./data/promtail/positions:/data/promtail/positions
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./nginx/log:/var/log/nginx:ro
    networks:
      - app-tier
    command: -config.file=/etc/promtail/config.yaml
    restart: unless-stopped
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./data/loki/config/loki-config.yaml:/etc/loki/local-config.yaml
      - ./data/loki:/data/loki
    networks:
      - app-tier
    restart: unless-stopped
    user: "1000:1000"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
    networks:
      - app-tier
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=cercat # 원하는 비밀번호로 변경하세요
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - loki
    user: "1000:1000"
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./data/prometheus/config:/etc/prometheus
      - ./data/prometheus/data:/prometheus
    ports:
      - 9090:9090
    command:
      - '--storage.tsdb.path=/prometheus'
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    networks:
      - app-tier
    user: "1000:1000"
